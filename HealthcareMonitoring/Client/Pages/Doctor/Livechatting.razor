@page "/livechat"
@using Microsoft.Extensions.Localization
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject MessageService MessageService

<div class="container">
	<div class="left-column">
		<ListGroup TItem="Patient" Items="Items" @bind-Value=Value GetItemDisplayText="@GetItemDisplayText"></ListGroup>
	</div>
	<div class="right-column">
		<div class="chat-window">
			@foreach (var chatItem in ChatItems.Where(x => x.UserId == Value?.Id || x.SendId == Value?.Id))
			{
				<div class="@($"chat-item {(chatItem.SendId == CurrentUserId ? "current-user" : "")}")">
					<div class="sender-name">@chatItem.SendName</div>
					<div class="chat-content">@chatItem.Content</div>
					<div class="chat-timestamp">@chatItem.CreatedTime.ToString("g")</div>
				</div>
			}
		</div>
		<div class="message-input-area">
			<textarea class="message-input" @bind="NewMessage"></textarea>
			<button class="send-button" @onclick="SendMessage">Send</button>
		</div>
	</div>
</div>

@code {
	private HealthcareMonitoring.Shared.Domain.Doctor? _doctor;
	private List<Patient>? Items { get; set; }

	private List<ChatItem> ChatItems { get; set; } = new List<ChatItem>();

	private const string Url = "api/Patients";
	private const string Urldoc = "api/Doctors";
	private const string Urlappo = "api/Appointments";

	private Patient? Value { get; set; }
	private int CurrentUserId = 1; // Assumed to be fetched or set through some logic

	private string NewMessage { get; set; } = string.Empty;
	private HubConnection hubConnection;


	public class ChatItem
	{
		public string Content { get; set; }
		public int SendId { get; set; }
		public int UserId { get; set; }
		public string SendName { get; set; }
		public DateTime CreatedTime { get; set; }
	}


	protected override async Task OnInitializedAsync()
	{
		try
		{

			var client = HttpClientFactory.CreateClient("HealthcareMonitoring.ServerAPI");
			var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var doctors = await client.GetFromJsonAsync<List<HealthcareMonitoring.Shared.Domain.Doctor>?>(Urldoc);
			if (doctors != null)
			{
				_doctor = doctors.FirstOrDefault(i => i.Email == state.User.Identity.Name);

				CurrentUserId = _doctor.Id;
			}


			var appointment = await client.GetFromJsonAsync<List<HealthcareMonitoring.Shared.Domain.Appointment>?>(Urlappo);

			var ids = appointment?.Where(i => i.DoctorId == CurrentUserId).Select(x => (int)x.PatientId).ToList();


			Items = (await client.GetFromJsonAsync<List<Patient>?>(Url)).Where(x => ids.Contains(x.Id)).ToList();
			hubConnection = new HubConnectionBuilder()
	.WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
	.Build();
			hubConnection.On<int, int, string>("ReceiveMessage", (user, id, message) =>
			{
				if (user == CurrentUserId)
				{
					return;
				}

				ChatItems.Add(new ChatItem()
					{
						Content = message,
						SendId = user,
						UserId = id,
						CreatedTime = DateTime.Now
					});
				StateHasChanged();
			});
			await hubConnection.StartAsync();

		}
		catch (Exception e)
		{
			System.Console.WriteLine(e.Message);
		}
	}

	private async Task SendMessage()
	{
		if (!string.IsNullOrWhiteSpace(NewMessage))
		{
			if (Value?.Id is null)
			{
				await MessageService.Show(new MessageOption()
					{
						Content = "Choose a patient."

					});
				return;
			}
			ChatItems.Add(new ChatItem { Content = NewMessage, SendId = CurrentUserId, UserId = Value.Id, CreatedTime = DateTime.Now, SendName = _doctor.DoctorName });
			await hubConnection.SendAsync("SendMessage", CurrentUserId, Value.Id, NewMessage);
			NewMessage = string.Empty; // Clear the message input after sending
		}
	}

	public bool IsConnected =>
	hubConnection.State == HubConnectionState.Connected;
	private static string? GetItemDisplayText(Patient item) => item.Name;


}

<style>

	.container {
		display: flex;
		height: calc(100vh - 20px);
	}

	.left-column {
		flex: 0 0 200px;
		background-color: #f7f7f7;
		overflow-y: auto;
		padding: 10px;
	}

	.list-group-item {
		border: 1px solid #ddd;
		margin-bottom: -1px;
		background-color: #fff;
		color: #555;
	}

		.list-group-item.active {
			background-color: #007bff;
			border-color: #007bff;
		}

	.right-column {
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		background-color: #eee;
		padding: 10px;
	}

	.chat-window {
		overflow-y: auto;
		flex-grow: 1;
	}

	.chat-item {
		margin-bottom: 10px;
		padding: 10px;
		border-radius: 8px;
		background-color: #fff;
		color: #000000;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	}

	.current-user {
		align-self: flex-end;
		background-color: #dcf8c6;
	}

	.sender-name {
		font-weight: bold;
	}

	.chat-content {
		margin-top: 5px;
	}

	.chat-timestamp {
		text-align: right;
		font-size: smaller;
	}

	.message-input-area {
		margin-top: auto;
		display: flex;
		padding: 10px;
		border-top: 2px solid #ccc;
	}

	.message-input {
		flex-grow: 1;
		margin-right: 10px;
		padding: 10px;
		border: 2px solid #ccc;
		border-radius: 4px;
		resize: none;
	}

	.send-button {
		padding: 10px 20px;
		background-color: #007bff;
		border: none;
		border-radius: 4px;
		cursor: pointer;
	}

		.send-button:hover {
			background-color: #0056b3;
		}
</style>