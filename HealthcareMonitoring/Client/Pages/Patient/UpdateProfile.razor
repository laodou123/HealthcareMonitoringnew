@page "/patient/profile"
@using HealthcareMonitoring.Client.Static;
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/PatientProfile.css">

</head>

<div class="form-wrapper">
    <h3>Update Your Profile</h3>
    <EditForm Model="@patient" OnValidSubmit="CreatePatient">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset disabled="@Disabled">
            <div class="form-group">
                <label>First Name: </label>
                <InputText @bind-Value="patient.Name" class="form-control" />
                <ValidationMessage For="@(() => patient.Name)" />
            </div>
            <div class="form-group">
                <label>Last Name: </label>
                <InputText @bind-Value="patient.LastName" class="form-control" />
                <ValidationMessage For="@(() => patient.LastName)" />
            </div>
            <div class="form-group">
                <label>NRIC: </label>
                <InputText @bind-Value="patient.NRIC" class="form-control" />
                <ValidationMessage For="@(() => patient.NRIC)" />
            </div>
            <div class="form-group">
                <label>Date of birth: </label>
                <InputDate @bind-Value="@patient.DOB" class="form-control" />
                <ValidationMessage For="@(() => patient.DOB)" />
            </div>
            <div class="form-group">
                <label>Gender: </label>
                <InputSelect @bind-Value="patient.Gender" class="form-control">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(() => patient.Gender)" />
            </div>
            <div class="form-group">
                <label>Phone Number: </label>
                <InputText @bind-Value="patient.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => patient.PhoneNumber)" />
            </div>
            <div class="form-group">
                <label>Address: </label>
                <InputText @bind-Value="patient.Address" class="form-control" />
                <ValidationMessage For="@(() => patient.Address)" />
            </div>
            <div class="form-group">
                <label>Allergies: </label>
                <InputTextArea @bind-Value="patient.AllergyDes" class="form-control" />
                <ValidationMessage For="@(() => patient.AllergyDes)" />
            </div>
            <Button ButtonType="BootstrapBlazor.Components.ButtonType.Submit" class="btn btn-primary btn-block">
                Update Profile
            </Button>
        </fieldset>
    </EditForm>
</div>

@code {
    public bool Disabled { get; set; } = false;
    public int id { get; set; }
    private IList<Patient>? patients;
    Patient patient = new Patient();

    protected async override Task OnInitializedAsync()
    {
        patients = await _client.GetFromJsonAsync<IList<Patient>>($"{Endpoints.Patients}");
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = state.User?.Identity?.Name;
        System.Console.WriteLine($"User Name: {userName}");

        if (patients != null)
        {
            foreach (var pat in patients)
            {
                System.Console.WriteLine($"Pat id: {pat.Id}");
                System.Console.WriteLine($"Pat Userid: {pat.UserId}");
                if (pat.Email == userName)
                {
                    id = pat.Id;
                    patient = pat;
                    System.Console.WriteLine($"Pat id: {id}");
                }
            }
        }

    }
    async Task CreatePatient()
    {
        await _client.PutAsJsonAsync($"{Endpoints.Patients}/{id}", patient);
        _navManager.NavigateTo("/patient/homepage");

    }
}
