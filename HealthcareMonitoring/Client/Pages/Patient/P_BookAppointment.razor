@page "/patient/bookappointment"
@using HealthcareMonitoring.Client.Static;
@inject HttpClient _client
@inject NavigationManager _navManager

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/PatientProfile.css">

</head>
<div class="form-wrapper">
    <h3>Book Your Appointment</h3>
    <EditForm Model="@app" OnValidSubmit="CreateAppointment">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset disabled="@Disabled">

            <div class="form-group">
                <label>Select Date and Time:</label>
                <input type="datetime-local" @bind="@app.Date" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
            </div>
            <div class="form-group">
                <label for="appointmentType">Select Appointment Type:</label>
                <select id="appointmentType" @onchange="HandleAppointmentTypeChange" class="form-control">
                    <option value="General">General</option>
                    <option value="Cardiologist">Cardiologist</option>
                    <option value="Pulmonologist">Pulmonologist</option>
                    <option value="Orthopedist">Orthopedist</option>
                </select>
            </div>
            @if (selectedAppointmentType != null)
            {
                <div class="form-group">
                    <label>Select Doctor:</label>
                    <InputSelect @bind-Value="app.DoctorId" class="form-control">
                        <option value="">-- Select Doctor --</option>
                        @if (filteredDoctors != null)
                        {
                            foreach (var doc in filteredDoctors)
                            {
                                <option value="@doc.Id">@doc.DoctorName -- @doc.DoctorLocation</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => app.DoctorId)" />
                </div>
            }
            <div class="form-group">
                <label>Reason: </label>
                <InputText @bind-Value="app.Reason" class="form-control" />
                <ValidationMessage For="@(() => app.Reason)" />
            </div>

            <Button type="submit" class="btn btn-primary btn-block">
                Book Appointment
            </Button>
        </fieldset>
    </EditForm>
</div>

@code {
    public bool Disabled { get; set; } = false;
    Appointment app = new Appointment();
    private IList<Doctor>? doctors;
    private IList<Patient>? patients;
    private string selectedAppointmentType = "General";
    private int selectedDoctor = 0; // Initialize to an invalid value
    private List<Doctor>? filteredDoctors;
    private bool IsSubmitDisabled => filteredDoctors.Count == 0;

    protected async override Task OnInitializedAsync()
    {
        doctors = await _client.GetFromJsonAsync<IList<Doctor>>($"{Endpoints.Doctors}");
    }

    private async Task CreateAppointment()
    {
        await _client.PostAsJsonAsync(Endpoints.Appointments, app);
        _navManager.NavigateTo("/patient/homepage");
    }
    private void HandleAppointmentTypeChange(ChangeEventArgs e)
    {
        selectedAppointmentType = e.Value.ToString(); // Update the selected type

        app.Type = selectedAppointmentType;

        // Populate filteredDoctors based on the selected appointment type
        filteredDoctors = doctors.Where(d => d.DoctorSpecialization == selectedAppointmentType).ToList();

        // Add any additional actions you want to perform here
        
    }
}




