// <auto-generated />
using System;
using HealthcareMonitoring.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthcareMonitoring.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("HealthcareMonitoring.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a3019b9-e7e2-46d2-b0e1-41752dd08869",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEACx3OIfJ35YoM8uE4GowaCNyVe992ttoSqMG2OeFXYzZYo2j8ZYJSaJWtZcN7JJ+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73039220-9c1f-4b43-8278-f18712113cd3",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "693e710c-008f-435b-a997-77f10812374d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf526814-c5f8-4611-b0a8-86ccfae0889a",
                            Email = "13858860788a@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hu",
                            LastName = "Yi",
                            LockoutEnabled = false,
                            NormalizedEmail = "13858860788A@GMAIL.COM",
                            NormalizedUserName = "13858860788A@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAPpP6jhFVsuisjKU/lw1ZogqWdOxROTXq/M4FcX7EPcTMRoPY91qJfjCYXYyQ3/YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9c752e6-c659-4737-b896-3e5fd4c6ba99",
                            TwoFactorEnabled = false,
                            UserName = "13858860788a@gmail.com"
                        },
                        new
                        {
                            Id = "8607cd47-e3bc-4a1b-96f9-e83d9e4ab0e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f0e05b6-9cd2-41f0-b371-794568f87f63",
                            Email = "pat@pat.com",
                            EmailConfirmed = false,
                            FirstName = "jiawei",
                            LastName = "tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "PAT@PAT.COM",
                            NormalizedUserName = "PAT@PAT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIxO7nNQkhXjc7xB+8yK4G0CGD3eTlyozCkRFkbpjc3k4QbdkYkX+kNHvdsUSpN+oA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b4d468d-0dcf-4ff4-bba7-e8686753ec80",
                            TwoFactorEnabled = false,
                            UserName = "pat@pat.com"
                        });
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorAvailavleTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorExperience")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DoctorIntroduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorPhoneNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DoctorSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorAvailavleTime = "2024-02-03|2024-02-04",
                            DoctorExperience = 5,
                            DoctorIntroduction = "张三",
                            DoctorLocation = "北京",
                            DoctorName = "张三",
                            DoctorNationality = "中国",
                            DoctorPhoneNumber = 123456789,
                            DoctorSpecialization = "Cardiologist",
                            Email = "13858860788aaa@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            DoctorAvailavleTime = "2024-02-03|2024-02-04",
                            DoctorExperience = 4,
                            DoctorIntroduction = "张三",
                            DoctorLocation = "上海",
                            DoctorName = "李四",
                            DoctorNationality = "中国",
                            DoctorPhoneNumber = 87654321,
                            DoctorSpecialization = "Pulmonologist",
                            Email = "doc@doc.com"
                        },
                        new
                        {
                            Id = 3,
                            DoctorAvailavleTime = "2024-02-03|2024-02-04",
                            DoctorExperience = 5,
                            DoctorIntroduction = "张三",
                            DoctorLocation = "黑龙江",
                            DoctorName = "王六",
                            DoctorNationality = "中国",
                            DoctorPhoneNumber = 87688321,
                            DoctorSpecialization = "Orthopedist",
                            Email = "doc@doc.com"
                        },
                        new
                        {
                            Id = 4,
                            DoctorAvailavleTime = "2024-02-03|2024-02-04",
                            DoctorExperience = 10,
                            DoctorIntroduction = "张三",
                            DoctorLocation = "温州",
                            DoctorName = "胡涵博",
                            DoctorNationality = "中国",
                            DoctorPhoneNumber = 12376543,
                            DoctorSpecialization = "General",
                            Email = "doc@doc.com"
                        });
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.MedRDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bloodSugarLevel")
                        .HasColumnType("int");

                    b.Property<int>("bpm")
                        .HasColumnType("int");

                    b.Property<int>("diastolicPressure")
                        .HasColumnType("int");

                    b.Property<int>("systolicPressure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedRDailies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 2, 1, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 1,
                            bpm = 66,
                            diastolicPressure = 1,
                            systolicPressure = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 2, 1, 8, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 62,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 1, 31, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 73,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 1, 30, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 80,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 1, 29, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 82,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2024, 1, 28, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 72,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2024, 1, 27, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 70,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2024, 1, 26, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 78,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2024, 1, 24, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 79,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2024, 1, 23, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 74,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2024, 1, 22, 12, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 71,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2024, 1, 22, 11, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 60,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2024, 1, 21, 16, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 69,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2024, 1, 20, 16, 0, 34, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            bloodSugarLevel = 15,
                            bpm = 70,
                            diastolicPressure = 12,
                            systolicPressure = 10
                        });
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.MedicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PR_Interval")
                        .HasColumnType("real");

                    b.Property<string>("P_wave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("QRS_Complex")
                        .HasColumnType("real");

                    b.Property<float>("QT_Interval")
                        .HasColumnType("real");

                    b.Property<float>("ST_Interval")
                        .HasColumnType("real");

                    b.Property<string>("T_Wave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("fev1")
                        .HasColumnType("real");

                    b.Property<float>("fev1_fvc_ratio")
                        .HasColumnType("real");

                    b.Property<float>("fvc")
                        .HasColumnType("real");

                    b.Property<float>("hb")
                        .HasColumnType("real");

                    b.Property<float>("hct")
                        .HasColumnType("real");

                    b.Property<int>("heartRate")
                        .HasColumnType("int");

                    b.Property<float>("lumarSpine")
                        .HasColumnType("real");

                    b.Property<float>("pef")
                        .HasColumnType("real");

                    b.Property<float>("plt")
                        .HasColumnType("real");

                    b.Property<float>("rbc")
                        .HasColumnType("real");

                    b.Property<string>("rhythm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("totalHip")
                        .HasColumnType("real");

                    b.Property<float>("tscoreH")
                        .HasColumnType("real");

                    b.Property<float>("tscoreL")
                        .HasColumnType("real");

                    b.Property<float>("tv")
                        .HasColumnType("real");

                    b.Property<float>("wbc")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("MedicalReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalType = "Cardiologist,Pulmonologist,Orthopedist,General",
                            PR_Interval = 1f,
                            P_wave = "1",
                            QRS_Complex = 1f,
                            QT_Interval = 1f,
                            ST_Interval = 1f,
                            T_Wave = "1",
                            fev1 = 4f,
                            fev1_fvc_ratio = 4f,
                            fvc = 4f,
                            hb = 2f,
                            hct = 2f,
                            heartRate = 1,
                            lumarSpine = 3f,
                            pef = 4f,
                            plt = 2f,
                            rbc = 2f,
                            rhythm = "Test",
                            totalHip = 3f,
                            tscoreH = 3f,
                            tscoreL = 3f,
                            tv = 4f,
                            wbc = 2f
                        },
                        new
                        {
                            Id = 2,
                            MedicalType = "Cardiologist,Pulmonologist",
                            PR_Interval = 10f,
                            P_wave = "Test",
                            QRS_Complex = 10f,
                            QT_Interval = 10f,
                            ST_Interval = 10f,
                            T_Wave = "Test",
                            fev1 = 10f,
                            fev1_fvc_ratio = 10f,
                            fvc = 10f,
                            hb = 10f,
                            hct = 10f,
                            heartRate = 10,
                            lumarSpine = 10f,
                            pef = 10f,
                            plt = 10f,
                            rbc = 10f,
                            rhythm = "Test",
                            totalHip = 10f,
                            tscoreH = 10f,
                            tscoreL = 10f,
                            tv = 10f,
                            wbc = 10f
                        });
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AllergyDes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "singapore",
                            AllergyDes = "seafood",
                            DOB = new DateTime(2024, 2, 4, 17, 42, 50, 787, DateTimeKind.Local).AddTicks(8391),
                            Email = "pat@pat.com",
                            Gender = "Male",
                            LastName = "Tan",
                            NRIC = "S1234567G",
                            Name = "Jia Wei",
                            PhoneNumber = "12345678",
                            ReportId = 1,
                            UserId = "8607cd47-e3bc-4a1b-96f9-e83d9e4ab0e3"
                        });
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicinePrescriptionDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicineQuantity")
                        .HasColumnType("int");

                    b.Property<string>("MedicineUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId1")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId1");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cd2bcf0c-20db-474f-8407-5a6b159518bc",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "5f31c948 - 0df8 - 4ed4 - ba1b - 23efcf131af9",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "693e710c-008f-435b-a997-77f10812374d",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "8607cd47-e3bc-4a1b-96f9-e83d9e4ab0e3",
                            RoleId = "5f31c948 - 0df8 - 4ed4 - ba1b - 23efcf131af9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Appointment", b =>
                {
                    b.HasOne("HealthcareMonitoring.Shared.Domain.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HealthcareMonitoring.Shared.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.MedRDaily", b =>
                {
                    b.HasOne("HealthcareMonitoring.Shared.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareMonitoring.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("HealthcareMonitoring.Shared.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId1");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthcareMonitoring.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthcareMonitoring.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareMonitoring.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthcareMonitoring.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
